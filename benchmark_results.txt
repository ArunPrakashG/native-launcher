   Compiling native-launcher v0.1.0 (/mnt/ssd/@projects/native-launcher)
warning: unused variable: `key_name`
  --> src/ui/keyboard_hints.rs:73:29
   |
73 |     pub fn flash_key(&self, key_name: &str) {
   |                             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_name`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: `native-launcher` (lib) generated 1 warning
warning: unused import: `DynamicPlugin`
  --> src/plugins/mod.rs:14:33
   |
14 | pub use dynamic::{load_plugins, DynamicPlugin, PluginMetrics};
   |                                 ^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: fields `total_entries` and `version` are never read
   --> src/desktop/cache.rs:194:9
    |
193 | pub struct CacheStats {
    |            ---------- fields in this struct
194 |     pub total_entries: usize,
    |         ^^^^^^^^^^^^^
195 |     pub version: u32,
    |         ^^^^^^^
    |
    = note: `CacheStats` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

warning: field `error` is never read
  --> src/plugins/dynamic.rs:31:9
   |
21 | pub struct PluginMetrics {
   |            ------------- field in this struct
...
31 |     pub error: Option<String>,
   |         ^^^^^
   |
   = note: `PluginMetrics` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: methods `is_slow` and `is_memory_heavy` are never used
  --> src/plugins/dynamic.rs:36:12
   |
34 | impl PluginMetrics {
   | ------------------ methods in this implementation
35 |     /// Check if this plugin is slow (>10ms load time)
36 |     pub fn is_slow(&self) -> bool {
   |            ^^^^^^^
...
46 |     pub fn is_memory_heavy(&self) -> bool {
   |            ^^^^^^^^^^^^^^^

warning: variants `None`, `Execute`, `OpenUrl`, and `Handled` are never constructed
   --> src/plugins/dynamic.rs:126:5
    |
125 | pub enum CKeyboardAction {
    |          --------------- variants in this enum
126 |     None,
    |     ^^^^
127 |     Execute,
    |     ^^^^^^^
128 |     OpenUrl,
    |     ^^^^^^^
129 |     Handled,
    |     ^^^^^^^

warning: fields `get_abi_version`, `get_name`, `get_description`, and `get_priority` are never read
   --> src/plugins/dynamic.rs:149:9
    |
147 | pub struct PluginFFI {
    |            --------- fields in this struct
148 |     /// Get ABI version (must return PLUGIN_ABI_VERSION)
149 |     pub get_abi_version: unsafe extern "C" fn() -> u32,
    |         ^^^^^^^^^^^^^^^
150 |     /// Get plugin name
151 |     pub get_name: unsafe extern "C" fn() -> CStringSlice,
    |         ^^^^^^^^
152 |     /// Get plugin description
153 |     pub get_description: unsafe extern "C" fn() -> CStringSlice,
    |         ^^^^^^^^^^^^^^^
154 |     /// Get plugin priority
155 |     pub get_priority: unsafe extern "C" fn() -> c_int,
    |         ^^^^^^^^^^^^

warning: methods `has_shift`, `has_alt`, and `has_super` are never used
  --> src/plugins/traits.rs:34:12
   |
18 | impl KeyboardEvent {
   | ------------------ methods in this implementation
...
34 |     pub fn has_shift(&self) -> bool {
   |            ^^^^^^^^^
...
39 |     pub fn has_alt(&self) -> bool {
   |            ^^^^^^^
...
44 |     pub fn has_super(&self) -> bool {
   |            ^^^^^^^^^

warning: method `is_visible` is never used
  --> src/ui/search_footer.rs:48:12
   |
10 | impl SearchFooter {
   | ----------------- method in this implementation
...
48 |     pub fn is_visible(&self) -> bool {
   |            ^^^^^^^^^^

warning: `native-launcher` (bin "native-launcher") generated 9 warnings (1 duplicate) (run `cargo fix --bin "native-launcher"` to apply 1 suggestion)
    Finished `bench` profile [optimized] target(s) in 29.57s
     Running benches/search_benchmark.rs (target/release/deps/search_benchmark-eaf1ae1dedc4b004)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


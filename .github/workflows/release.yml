name: Create Release

on:
  push:
    tags:
      - "v*.*.*" # Triggers on version tags like v0.1.0, v1.2.3, etc.
  workflow_dispatch: # Allow manual triggering
    inputs:
      tag:
        description: "Tag name for the release (e.g., v0.1.0)"
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create GitHub Release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Extract version from tag
        id: get_version
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          VERSION="${TAG#v}"  # Remove 'v' prefix
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Update VERSION file
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "$VERSION" > VERSION
          echo "Updated VERSION file to $VERSION"

      - name: Get previous tag
        id: get_prev_tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.get_tag.outputs.tag }}^ 2>/dev/null || echo "")
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREV_TAG"

      - name: Generate changelog from commits
        id: changelog
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          PREV_TAG="${{ steps.get_prev_tag.outputs.prev_tag }}"

          echo "# Changelog" > changelog.md
          echo "" >> changelog.md

          if [ -z "$PREV_TAG" ]; then
            echo "## Initial Release" >> changelog.md
            echo "" >> changelog.md
            echo "This is the first release of Native Launcher 🚀" >> changelog.md
            echo "" >> changelog.md
            echo "### All Commits" >> changelog.md
            git log --pretty=format:"- %s (%h)" >> changelog.md
          else
            echo "## Changes from $PREV_TAG to $TAG" >> changelog.md
            echo "" >> changelog.md
            
            # Group commits by type
            echo "### 🚀 Features" >> changelog.md
            git log $PREV_TAG..$TAG --pretty=format:"%s|||%h" | grep -iE "^(feat|feature)" | sed 's/|||/ (/' | sed 's/$/)/' | sed 's/^/- /' >> changelog.md || echo "_No new features_" >> changelog.md
            echo "" >> changelog.md
            
            echo "### 🐛 Bug Fixes" >> changelog.md
            git log $PREV_TAG..$TAG --pretty=format:"%s|||%h" | grep -iE "^(fix|bugfix)" | sed 's/|||/ (/' | sed 's/$/)/' | sed 's/^/- /' >> changelog.md || echo "_No bug fixes_" >> changelog.md
            echo "" >> changelog.md
            
            echo "### 📚 Documentation" >> changelog.md
            git log $PREV_TAG..$TAG --pretty=format:"%s|||%h" | grep -iE "^(docs|doc)" | sed 's/|||/ (/' | sed 's/$/)/' | sed 's/^/- /' >> changelog.md || echo "_No documentation changes_" >> changelog.md
            echo "" >> changelog.md
            
            echo "### 🔧 Maintenance" >> changelog.md
            git log $PREV_TAG..$TAG --pretty=format:"%s|||%h" | grep -iE "^(chore|refactor|perf|test)" | sed 's/|||/ (/' | sed 's/$/)/' | sed 's/^/- /' >> changelog.md || echo "_No maintenance changes_" >> changelog.md
            echo "" >> changelog.md
            
            echo "### 🔀 Other Changes" >> changelog.md
            git log $PREV_TAG..$TAG --pretty=format:"%s|||%h" | grep -viE "^(feat|feature|fix|bugfix|docs|doc|chore|refactor|perf|test)" | sed 's/|||/ (/' | sed 's/$/)/' | sed 's/^/- /' >> changelog.md || echo "_No other changes_" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "---" >> changelog.md
          echo "" >> changelog.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${TAG}" >> changelog.md

          cat changelog.md

      - name: Update CHANGELOG.md
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          VERSION="${{ steps.get_version.outputs.version }}"
          PREV_TAG="${{ steps.get_prev_tag.outputs.prev_tag }}"
          DATE=$(date +%Y-%m-%d)

          # Create temporary file for new changelog entry
          echo "## [$VERSION] - $DATE" > new_entry.md
          echo "" >> new_entry.md

          # Add features
          if git log $PREV_TAG..$TAG --pretty=format:"%s" | grep -qiE "^(feat|feature)"; then
            echo "### Added" >> new_entry.md
            echo "" >> new_entry.md
            git log $PREV_TAG..$TAG --pretty=format:"%s" | grep -iE "^(feat|feature)" | sed 's/^[^:]*: //' | sed 's/^/- /' >> new_entry.md
            echo "" >> new_entry.md
          fi

          # Add bug fixes
          if git log $PREV_TAG..$TAG --pretty=format:"%s" | grep -qiE "^(fix|bugfix)"; then
            echo "### Fixed" >> new_entry.md
            echo "" >> new_entry.md
            git log $PREV_TAG..$TAG --pretty=format:"%s" | grep -iE "^(fix|bugfix)" | sed 's/^[^:]*: //' | sed 's/^/- /' >> new_entry.md
            echo "" >> new_entry.md
          fi

          # Add changes/refactoring
          if git log $PREV_TAG..$TAG --pretty=format:"%s" | grep -qiE "^(chore|refactor|perf)"; then
            echo "### Changed" >> new_entry.md
            echo "" >> new_entry.md
            git log $PREV_TAG..$TAG --pretty=format:"%s" | grep -iE "^(chore|refactor|perf)" | sed 's/^[^:]*: //' | sed 's/^/- /' >> new_entry.md
            echo "" >> new_entry.md
          fi

          # Add documentation
          if git log $PREV_TAG..$TAG --pretty=format:"%s" | grep -qiE "^(docs|doc)"; then
            echo "### Documentation" >> new_entry.md
            echo "" >> new_entry.md
            git log $PREV_TAG..$TAG --pretty=format:"%s" | grep -iE "^(docs|doc)" | sed 's/^[^:]*: //' | sed 's/^/- /' >> new_entry.md
            echo "" >> new_entry.md
          fi

          # Insert new entry after [Unreleased] section
          if [ -f CHANGELOG.md ]; then
            # Find line number of first version header (## [x.x.x])
            FIRST_VERSION_LINE=$(grep -n "^## \[" CHANGELOG.md | grep -v "Unreleased" | head -1 | cut -d: -f1)
            
            if [ -n "$FIRST_VERSION_LINE" ]; then
              # Insert new entry before first version
              head -n $((FIRST_VERSION_LINE - 1)) CHANGELOG.md > CHANGELOG.tmp
              cat new_entry.md >> CHANGELOG.tmp
              tail -n +$FIRST_VERSION_LINE CHANGELOG.md >> CHANGELOG.tmp
              mv CHANGELOG.tmp CHANGELOG.md
            else
              # No existing versions, append after Unreleased
              UNRELEASED_END=$(grep -n "^## " CHANGELOG.md | tail -1 | cut -d: -f1)
              if [ -n "$UNRELEASED_END" ]; then
                head -n $UNRELEASED_END CHANGELOG.md > CHANGELOG.tmp
                echo "" >> CHANGELOG.tmp
                cat new_entry.md >> CHANGELOG.tmp
                tail -n +$((UNRELEASED_END + 1)) CHANGELOG.md >> CHANGELOG.tmp
                mv CHANGELOG.tmp CHANGELOG.md
              else
                # Fallback: append to end
                echo "" >> CHANGELOG.md
                cat new_entry.md >> CHANGELOG.md
              fi
            fi
            
            echo "Updated CHANGELOG.md with version $VERSION"
            echo "--- New entry preview ---"
            cat new_entry.md
          else
            echo "CHANGELOG.md not found, skipping update"
          fi

      - name: Commit VERSION and CHANGELOG updates
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add VERSION CHANGELOG.md

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update VERSION to ${{ steps.get_version.outputs.version }} and CHANGELOG [skip ci]"
            git push origin HEAD:main || git push origin HEAD:master || echo "Failed to push, continuing..."
          fi

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install GTK4 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-4-dev \
            libadwaita-1-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf-2.0-dev \
            libwayland-dev \
            meson \
            ninja-build \
            valac \
            gobject-introspection \
            libgirepository1.0-dev

      - name: Build and install gtk4-layer-shell
        run: |
          git clone https://github.com/wmww/gtk4-layer-shell.git
          cd gtk4-layer-shell
          meson setup build -Dprefix=/usr
          meson compile -C build
          sudo meson install -C build
          sudo ldconfig

      - name: Build release binary
        run: |
          cargo build --release
          strip target/release/native-launcher

      - name: Create release archive
        run: |
          mkdir -p release
          cp target/release/native-launcher release/
          cp README.md LICENSE CONTRIBUTING.md release/
          cp -r config release/
          cd release
          tar -czf ../native-launcher-${{ steps.get_tag.outputs.tag }}-linux-x86_64.tar.gz *
          cd ..

      - name: Generate checksums
        run: |
          sha256sum native-launcher-${{ steps.get_tag.outputs.tag }}-linux-x86_64.tar.gz > checksums.txt
          cat checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Native Launcher ${{ steps.get_tag.outputs.tag }}
          body_path: changelog.md
          draft: false
          prerelease: false
          files: |
            native-launcher-${{ steps.get_tag.outputs.tag }}-linux-x86_64.tar.gz
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-launcher-binary
          path: target/release/native-launcher
          retention-days: 30

  build-additional-targets:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            name: linux-x86_64-musl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            musl-tools \
            libgtk-4-dev \
            libadwaita-1-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf-2.0-dev \
            libwayland-dev \
            meson \
            ninja-build \
            valac \
            gobject-introspection \
            libgirepository1.0-dev

      - name: Build and install gtk4-layer-shell
        run: |
          git clone https://github.com/wmww/gtk4-layer-shell.git
          cd gtk4-layer-shell
          meson setup build -Dprefix=/usr
          meson compile -C build
          sudo meson install -C build
          sudo ldconfig

      - name: Build for ${{ matrix.target }}
        run: |
          cargo build --release --target ${{ matrix.target }}
          strip target/${{ matrix.target }}/release/native-launcher

      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../native-launcher-${{ github.ref_name }}-${{ matrix.name }}.tar.gz native-launcher

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          files: native-launcher-${{ github.ref_name }}-${{ matrix.name }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
